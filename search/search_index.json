{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Welcome to the Rapid Reservation Doc Site! This will be a major place of reference in how and why things are done and a way for use to document as developers!</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>GitHub Organization</li> <li>Rapid Reservation Scrum Board</li> <li>Rapid Reservartion UI</li> <li>Rapid Reservation API</li> </ul>"},{"location":"#site-layout","title":"Site layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    team.md   # Team information\n    github.md # Intro to GitHub\n</code></pre>"},{"location":"#more-coming-soon","title":"MORE COMING SOON","text":""},{"location":"design/","title":"Design","text":""},{"location":"design/#development-stack","title":"Development Stack","text":"<p>We have chose to use the following tech stack:</p> <ul> <li>Front End / UI: React (Possibly Next.js (react based))</li> <li>Backend / API:TBD</li> <li>Database: Postgres</li> <li>CI/CD: GitHub Actions</li> <li>Testing: TBD (Playwright or Selenium)</li> <li>Deployment:TBD</li> <li>Hosting:TBD</li> </ul>"},{"location":"design/#why-seperate-ui-and-api","title":"Why seperate UI and API?","text":"<p>Seperation of concerns is used alot in production enviroments. Having both the UI(front end) and API (backend) as seperate entities keeps the set of problems isolated. It is also helpful when working on a project, the UI folks can mock data and still build out components without the API. The API team can make sure the endpoints work and return relevant data. Once both side have a \"finished\" product, its matter of working together to determine what each endpoint should return and how the component will handle the information! Again, it sounds weird conceptually, but in practice it's actually really nice!</p>"},{"location":"design/#react","title":"React","text":"<p>React's primary goal is to minimize the bugs that occur when developers are building UIs. It does this through the use of components \u2014 self-contained, logical pieces of code that describe a portion of the user interface. These components can be composed together to create a full UI, and React abstracts away much of the rendering work, leaving you to concentrate on the UI design.</p> <p>Why React for RR? From an industry standpoint, react is the most popular way for Front End design. As this project is an capstone, and a way to show off what we have learned throughout WTCC, we want to show potential employers we undersand industry trends and are able to learn. React also has THE best tutorial and has a very low skill floor/barrier to entry, but a HIGH ceiling, making it accessible and viable for any developer!</p> <p>The best part is your write a component once, you never write it again! you design a button, you save it as a button component, and when you need a button, you just add that component and can customize the props as you see fit! It sounds weird at first, but watch the tutorial video or check out the docs and it will ALL make sense, I promise!</p>"},{"location":"design/#guides-and-tutorials","title":"Guides and Tutorials","text":"<p>Here are some helpful guides for getting started with React:</p> <ul> <li>Getting Started</li> <li>React: Tic Tac Toe: Can be done in an hour and REALLY layouts the foundation needed for scope of this projet! If you can do this, you are good to go!</li> <li> <p>Ultimate React Course with Mosh</p> </li> <li> <p>React-Example: I built a simple example React project that create restaraunt tablet that on button click we mark it as open or reserved to give you guys an example that correlates with our project!</p> </li> </ul>"},{"location":"design/#api","title":"API","text":"<p>For the backend, we will using an API to interact with database and retrieve information. For example, will have a <code>/api/foo/bar/Menu</code> endpoint that when hit, will return a JSON object of the whole menu, which we can then use React to take in endpoint, break it down and display in a menu format! This is up for debate, as there is very little javascript taught at Wake Tech, and while the Front End will be using Javascript, alot of actuall component design is HTML, which we have used, and the rest is easy to pick up. Designing an entire api in JS/TS might be out of scope for this project simple because of time to complete - time to learn. The other thought would be to use FastAPI or Flask as the API, which are both python! We have all taken python so there is less learning so easier for people to get started. This is something we will discuss in our first few meetings to figure out where we want to go!</p>"},{"location":"design/#guides-and-tutorials_1","title":"Guides and Tutorials","text":"<p>Here are some helpful guides for getting started with APIS:</p> <ul> <li>Getting Started with Fast API</li> <li>Getting Started with Flask</li> <li>What is an API?</li> <li>FASTAPI and Flask based CRUD API</li> <li>Video: Simple REST API in Flask</li> <li>Video: Simple Rest API in FastAPI</li> <li>Video: Simple Rest API in Typescript/Javascript</li> </ul>"},{"location":"design/#postgres","title":"Postgres","text":"<p>We will be using postgres for our database. PostgreSQL is a popular open-source relational database with numerous benefits for developers, including feature availability, standards compliance, community support, and project governance.</p> <p>Setting up databases are a pain, especially when you essentialy are setting them up one for dev, and one for prod. An EASY way to skip all of this uses our friend Docker to make it easy for us. We will be using <code>docker-compose</code> in order to quickly spin up a working database. Everything is managed in the docker compose file and it will spin it up for us. We then just its URL in the .env and BOOM, you are connected! I will have an example of this to show HOW easy and simple it is!</p>"},{"location":"design/#guides-and-tutorials_2","title":"Guides and Tutorials","text":"<p>Here are is some information on Postgres:</p> <ul> <li>Why is PostgreSQL so popular?</li> <li>Setting up Postgres DB with Docker Compose!</li> </ul>"},{"location":"design/#supplmental-technology","title":"Supplmental Technology","text":"<ul> <li>Material for MkDocs</li> <li>Docker</li> </ul>"},{"location":"design/#more-coming-soon","title":"MORE COMING SOON","text":""},{"location":"github/","title":"Source Control","text":""},{"location":"github/#we-love-github","title":"We love GitHub","text":"<p>We will be heavily relying on Git for version control, using GitHub to host our repositories and GitHub Actions for any automation we might need.</p>"},{"location":"github/#guides-and-tutorials","title":"Guides and Tutorials","text":"<ul> <li>Here are some helpful guides for using GitHub:</li> <li>Getting Started</li> <li>Git, GitHub, &amp; GitHub Desktop for Beginners</li> </ul>"},{"location":"github/#basic-git-workflow","title":"Basic Git workflow","text":""},{"location":"github/#useful-commands","title":"Useful Commands","text":"<p>Some of the most common commands you will use are:</p> <ul> <li><code>git clone &lt;github remote url&gt;</code> - This command will copy the repo to your local machine in the current working directory you are in.</li> <li><code>git pull</code> - This command pulls any changes from remote repo to your local. PULL OFTEN! Will save you from merge conflicts or the dreaded <code>git rebase</code>!</li> <li><code>git status</code> - This command shows the status of current changes. It will show what has been staged and what has not.</li> <li><code>git add &lt;filename&gt;</code> - This will stage the file to be commited to the branch.</li> <li><code>git commit -m \"&lt;insert commit message\"</code> - This command is used commit your changes to your local branch</li> <li><code>git push origin &lt;branch name&gt;</code> - This command is used to push your local copy of the branch to GitHub repo copy of your branch</li> </ul>"},{"location":"github/#branching-and-commits","title":"Branching and Commits","text":"<p>We will following feature branche approach. We will have a main branch per repo that will be the \"live\" working version. When adding a new feature or fix, we will create a branch. Branching is like taking a copy of main, and being able add and test a new feature without changing the main branch.</p> <p>Example: To create a feature branch we can use <code>git checkout -b \"branch-name</code>. MAKE SURE you are ON the main branch when creating your feature branch.</p> <p>Main will be protected, meaning no push will go through until a PR has been reviewed. Current industry best practice is to have two reviewers, for the sake and scope of this project, for most things we will only use one reviewer needed before a push.</p>"},{"location":"github/#commit-messages","title":"Commit Messages","text":"<p>Something that is not talked about enough are Commit Message conventions. There is a widely accepted standard that can found here thats gives a basic overview. It might seem small or pointless but it REALLY helps when quickly glancing over commit history or when a rollback is needed.</p> <p>Examples:</p> <ul> <li><code>git commit -m \"fix: fixed this bug\"</code></li> <li><code>git commit -m \"chore: updated the design.md for doc site</code></li> <li><code>git commit -m \"feat: adding this fully built feature\"</code></li> </ul>"},{"location":"github/#more-coming-soon","title":"MORE COMING SOON","text":""},{"location":"team/","title":"Development Team","text":""},{"location":"team/#meet-the-team","title":"Meet the Team","text":""},{"location":"team/#anthony-epps","title":"Anthony Epps","text":"<ul> <li>Favorite Language: Python (though TS/Go are fighting for it)</li> <li>Favorite Role: Backend &amp; DevOps</li> <li>Prefered OS: MacOS or Fedora (anything Unix based)</li> <li>GitHub Link: Here</li> <li>LinkedIn: Here</li> </ul>"},{"location":"team/#dakotah-campbell","title":"Dakotah Campbell","text":"<p>Favorite Language: Favorite Role: Prefered OS:</p>"},{"location":"team/#william-henderson","title":"William Henderson","text":"<p>Favorite Language: Favorite Role: Prefered OS:</p>"},{"location":"team/#luke-wainwright","title":"Luke Wainwright","text":"<p>Favorite Language: Favorite Role: Prefered OS:</p>"},{"location":"team/#edison-kaulfuss","title":"Edison Kaulfuss","text":"<p>Favorite Language: Favorite Role: Prefered OS:</p>"}]}